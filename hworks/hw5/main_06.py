# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
# üìå –°–æ–∑–¥–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä Jinja –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è HTML
# —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å User —Å –ø–æ–ª—è–º–∏ id, name, email –∏ password.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ users –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# üìå –°–æ–∑–¥–∞–π—Ç–µ HTML —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω
# —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è
# –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ—Ç–æ–¥ GET).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä Jinja.

import uvicorn
from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

app = FastAPI()
templates = Jinja2Templates(directory="templates")


class UserOut(BaseModel):
    id: int
    name: str
    email: str


class UserIn(BaseModel):
    name: str
    email: str
    password: int


class User(UserIn):
    id: int


users = []
for i in range(10):
    users.append(User(
        id=i + 1,
        name=f'name{i + 1}',
        email=f'email{i + 1}@mail.ru',
        password=123 + i,
    ))


@app.get("/users/", response_class=HTMLResponse)
async def get_users(request: Request):
    return templates.TemplateResponse("users.html", {"request": request, "users": users})


@app.post("/users/", response_model=User)
async def create_users(new_user: UserIn):
    users.append(User(id=len(users) + 1,
                      name=new_user.name,
                      email=new_user.email,
                      password=new_user.password))
    return users[-1]


@app.put("/users/{users_id}")
async def update_users(id: int, user: User):
    return {"id": id, "user": user}


@app.put("/users/", response_model=User)
async def update_user(user_id: int, new_user: UserIn):
    for i in range(0, len(users)):
        if users[i].id == user_id:
            current_user = users[user_id - 1]
            current_user.name = new_user.name
            current_user.email = new_user.email
            current_user.password = new_user.password
            return current_user
        raise HTTPException(status_code=404, detail="user not found")


@app.delete("/users/", response_class=HTMLResponse)
async def delete_user(request: Request, user_id: int):
    for user in users:
        if users[i].id == user_id:
            users.remove(user)
            break
    return templates.TemplateResponse("users.html", {"request": request, "users": users})


if __name__ == '__main__':
    uvicorn.run(
        "main_06:app",
        host="127.0.0.1",
        port=8000,
        reload=True
    )
